#!/sbin/sh

# --- Initialization ---
umask 022

# --- Global variables ---
TMPDIR=/dev/tmp
PERSISTDIR=/sbin/.magisk/mirror/persist

rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# --- Define ui_print function ---
ui_print() {
	echo "$1"
}

# --- Require new Magisk version ---
require_new_magisk() {
	ui_print "*******************************"
	ui_print " Please install Magisk v19.0+! "
	ui_print "*******************************"
	exit 1
}

# --- Check for legacy script ---
is_legacy_script() {
	unzip -l "$ZIPFILE" install.sh | grep -q install.sh
	return $?
}

# --- Print module name ---
print_modname() {
	local len
	len=$(echo -n $MODNAME | wc -c)
	len=$((len + 2))
	local pounds=$(printf "%${len}s" | tr ' ' '*')
	ui_print "$pounds"
	ui_print " $MODNAME "
	ui_print "$pounds"
	ui_print "*******************"
	ui_print " Powered by Magisk "
	ui_print "*******************"
}

# --- Environment setup ---
OUTFD=$2
ZIPFILE=$3

mount /data 2>/dev/null

# --- Load Magisk utility functions ---
[ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
. /data/adb/magisk/util_functions.sh
[ $MAGISK_VER_CODE -gt 18100 ] || require_new_magisk

# --- Prepare for flashable zips ---
setup_flashable

# --- Mount necessary partitions ---
mount_partitions

# --- Detect API level and architecture ---
api_level_arch_detect

# --- Perform boot or recovery actions ---
$BOOTMODE && boot_actions || recovery_actions

# --- Preparation step ---
unzip -o "$ZIPFILE" module.prop -d $TMPDIR >&2
[ ! -f $TMPDIR/module.prop ] && abort "! Unable to extract zip file!"

$BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
MODULEROOT=$NVBASE/$MODDIRNAME
MODID=$(grep_prop id $TMPDIR/module.prop)
MODPATH=$MODULEROOT/$MODID
MODNAME=$(grep_prop name $TMPDIR/module.prop)

# --- Create module path ---
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

# --- Install process ---
if is_legacy_script; then
	unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh 'common/*' -d $TMPDIR >&2

	# --- Load and run install.sh ---
	. $TMPDIR/install.sh
	print_modname
	on_install

	# --- Copy uninstall script ---
	[ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh

	# --- Skip mount file ---
	$SKIPMOUNT && touch $MODPATH/skip_mount

	# --- Prop file ---
	$PROPFILE && cp -af $TMPDIR/system.prop $MODPATH/system.prop

	# --- Module info ---
	cp -af $TMPDIR/module.prop $MODPATH/module.prop

	# --- post-fs-data script ---
	$POSTFSDATA && cp -af $TMPDIR/post-fs-data.sh $MODPATH/post-fs-data.sh

	# --- service script ---
	$LATESTARTSERVICE && cp -af $TMPDIR/service.sh $MODPATH/service.sh

	ui_print "- Setting permissions"
	set_permissions

else
	print_modname

	unzip -o "$ZIPFILE" customize.sh -d $MODPATH >&2

	if ! grep -q '^SKIPUNZIP=1$' $MODPATH/customize.sh 2>/dev/null; then
		ui_print "- Extracting module files"
		unzip -o "$ZIPFILE" -x 'META-INF/*' -d $MODPATH >&2

		# --- Default permissions ---
		set_perm_recursive $MODPATH 0 0 0755 0644
	fi

	# --- Load customize script ---
	[ -f $MODPATH/customize.sh ] && . $MODPATH/customize.sh
fi

# --- Handle replace folders ---
for TARGET in $REPLACE; do
	ui_print "- Replace target: $TARGET"
	mktouch $MODPATH$TARGET/.replace
done

# --- Update Magisk Manager info ---
if $BOOTMODE; then
	mktouch $NVBASE/modules/$MODID/update
	cp -af $MODPATH/module.prop $NVBASE/modules/$MODID/module.prop
fi

# --- Copy custom sepolicy rules ---
if [ -f $MODPATH/sepolicy.rule -a -e $PERSISTDIR ]; then
	ui_print "- Installing custom sepolicy patch"
	PERSISTMOD=$PERSISTDIR/magisk/$MODID
	mkdir -p $PERSISTMOD
	cp -af $MODPATH/sepolicy.rule $PERSISTMOD/sepolicy.rule
fi

# --- Clean up unnecessary files ---
rm -rf \
	$MODPATH/system/placeholder \
	$MODPATH/customize.sh \
	$MODPATH/README.md \
	$MODPATH/.git* 2>/dev/null

# --- Finalizing ---
cd /
$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0